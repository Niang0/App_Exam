import streamlit as st
import pandas as pd
from scraper.selenium_scraper import scraper_multi_pages  # Chemin mis √† jour
from dashboard.visualisations import afficher_dashboard
from feedback.evaluation import formulaire

# --- Configuration de la page ---
st.set_page_config(page_title="SAM SCRAPER", layout="wide")
st.title("üï∑Ô∏èSAM SCRAPER")
st.markdown("Bienvenue sur la plateforme de scraping et d'analyse de donn√©es immobili√®res.")

# --- Chargement du style CSS ---
with open("style.css") as f:
    st.markdown(f"<style>{f.read()}</style>", unsafe_allow_html=True)

# --- Menu lat√©ral ---
menu = st.sidebar.radio("Navigation", [
    "Scraper les donn√©es (nettoy√©es)",
    "Visualiser le dashboard",
    "T√©l√©charger les donn√©es brutes",
    "Donner votre avis"
])

# --- Fichiers de donn√©es ---
fichiers_brutes = {
    "Appartements √† louer": "Data/Appartements_____a___louer.xlsx",
    "Appartements meubl√©s": "Data/Appartements_______meubles.xlsx",
    "Terrains √† vendre": "Data/terrains____a__vendre.xlsx"
}

fichiers_nettoyes = {
    "Appartements √† louer": "Data/expat_dakar_apps_nettoyees.csv",
    "Appartements meubl√©s": "Data/expatDkr_app_meubles.csv",
    "Terrains √† vendre": "Data/expat_terrains_nettoyees.csv"
}

# --- Scraping ---
if menu == "Scraper les donn√©es (nettoy√©es)":
    st.header("üï∑Ô∏è Scraper les donn√©es")
    categorie = st.selectbox("Choisissez une cat√©gorie :", list(fichiers_nettoyes.keys()))
    nb_pages = st.slider("Nombre de pages √† scraper :", 1, 100, 5)

    if st.button("Lancer le scraping"):
        with st.spinner(f"Scraping de {categorie} sur {nb_pages} page(s)..."):
            try:
                # Lancement du scraping
                df = scraper_multi_pages(nb_pages, categorie)

                # Sauvegarde dans le bon fichier CSV
                nom_fichier = fichiers_nettoyes[categorie]
                df.to_csv(nom_fichier, index=False)

                st.success(f"{len(df)} annonces r√©cup√©r√©es et enregistr√©es dans {nom_fichier}")

                # Affichage du DataFrame
                st.subheader("Aper√ßu des donn√©es scrap√©es")
                st.dataframe(df, use_container_width=True)

                # Bouton de t√©l√©chargement
                st.download_button(
                    label=f"üì• T√©l√©charger les donn√©es ({len(df)} lignes)",
                    data=df.to_csv(index=False).encode("utf-8"),
                    file_name=nom_fichier.split("/")[-1],
                    mime="text/csv"
                )
            except Exception as e:
                st.error(f"‚ùå Une erreur est survenue pendant le scraping : {e}")

# --- Visualisation Dashboard ---
elif menu == "Visualiser le dashboard":
    st.header("üìà Dashboard d'analyse")
    choix = st.selectbox("Choisissez une cat√©gorie :", list(fichiers_nettoyes.keys()))

    try:
        df = pd.read_csv(fichiers_nettoyes[choix])
        afficher_dashboard(df, choix)
    except FileNotFoundError:
        st.error("Fichier non trouv√©. Veuillez lancer le scraping d'abord.")
    except Exception as e:
        st.error(f"Erreur lors du chargement des donn√©es : {e}")

# --- T√©l√©chargement des donn√©es brutes ---
elif menu == "T√©l√©charger les donn√©es brutes":
    st.header("üì• T√©l√©chargement des fichiers brutes (.xlsx ‚Üí .csv)")

    for titre, chemin in fichiers_brutes.items():
        try:
            df = pd.read_excel(chemin)
            st.download_button(
                label=f"T√©l√©charger : {titre}",
                data=df.to_csv(index=False).encode("utf-8"),
                file_name=chemin.replace("Data/", "").replace(".xlsx", ".csv"),
                mime="text/csv"
            )
        except FileNotFoundError:
            st.warning(f"‚ö†Ô∏è Fichier manquant : {chemin}")
        except Exception as e:
            st.error(f"‚ùå Erreur : {e}")

# --- √âvaluation de l'application ---
elif menu == "Donner votre avis":
    st.header("üìù √âvaluation de l'application")
    formulaire()
